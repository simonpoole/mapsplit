

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.github.breadmoirai:github-release:2.2.11"
    }
}

plugins {
    id "org.sonarqube" version "3.0"
}

apply plugin: "com.github.breadmoirai.github-release"
apply plugin: 'java'
apply plugin: "jacoco"
apply plugin: 'eclipse'

version = '0.4.1'

repositories {
    mavenCentral()
    maven { url 'http://nexus.onebusaway.org/nexus/content/repositories/public/' }
}

ext {
    github_token = System.getenv('GITHUB_TOKEN')
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'mapsplit fat jar',
        'Implementation-Version': "${project.version}",
        'Main-Class': 'dev.osm.mapsplit.MapSplit'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
fatJar.group = 'build'

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

sonarqube {
    properties {
        property "sonar.java.source","1.8"
        property "sonar.sourceEncoding","UTF-8"
        property "sonar.java.binaries", "build/classes/java/main/"
        property "sonar.coverage.jacoco.xmlReportPaths","build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
        property "sonar.qualitygate.wait", "true"
    }
}

test{
    maxHeapSize = "6G"
}

dependencies {
    compile 'org.openstreetmap.osmosis:osmosis-core:0.47'
    compile 'org.openstreetmap.osmosis:osmosis-pbf:0.47'
    compile 'com.google.protobuf:protobuf-java:3.7.1'
    compile 'commons-cli:commons-cli:1.4'
    compile 'ch.poole.geo:mbtiles4j:1.2.0'
    compile 'org.jetbrains:annotations:15.0'
    compile 'com.zaxxer:SparseBitSet:1.1'
    compile 'it.unimi.dsi:fastutil:8.5.8'
    testCompile 'junit:junit:4.12'
}

githubRelease {
    token "${github_token}"
    owner "simonpoole"
    tagName "${version}"
    releaseName "${version}"
    body ""
    FilenameFilter filter = { dir, filename -> filename.contains(version) }
    releaseAssets = jar.destinationDir.listFiles filter
    overwrite true
}
